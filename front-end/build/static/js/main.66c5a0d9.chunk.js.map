{"version":3,"sources":["Components/Lottery/TicketCollection.js","Components/Images/tomorrow-tix.svg","Components/Lottery/Lottery.jsx","App.js","reportWebVitals.js","index.js"],"names":["TicketCollection","key","this","reduce","a","b","Array","Lottery","componentDidMount","getLotteryEntrants","handleChange","target","name","value","setState","submit","e","preventDefault","payload","state","ticketRequest","axios","url","method","data","then","console","log","resetUserInputs","catch","get","response","entrants","err","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","lotteryResults","numberOfWinners","ticketAllocation","startDraw","userWinners","slice","tickets","sum","draw","winners","hide","displayWinner","$","className","map","_id","minTicketAllocation","src","img","alt","onSubmit","type","placeholder","onChange","id","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66c5a0d9.chunk.js","sourcesContent":["export default class TicketCollection extends Array {\n    sum(key){\n        return this.reduce((a, b) => a + (b[key] || 0), 0)\n    }\n}","export default __webpack_public_path__ + \"static/media/tomorrow-tix.e383f92e.svg\";","import React from 'react';\nimport axios from 'axios';\nimport $ from 'jquery';\nimport TicketCollection from './TicketCollection';\nimport img from '../Images/tomorrow-tix.svg';\nimport './Lottery.css';\n\nexport default class Lottery extends React.Component {\n    constructor(){\n        super();\n        this.state={\n            name:'',\n            ticketRequest: 0,\n            entrants: [],\n            winners: [],\n            ticketAllocation: 10,\n            minTicketAllocation: 0,\n            draw: false,\n            hide: false,\n        }\n    }\n\n    componentDidMount = () => {\n        this.getLotteryEntrants(); \n    };\n\n    handleChange = ({target}) => {\n        const {name, value } = target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    submit = (e) => {\n        e.preventDefault();\n        const payload = {\n            name: this.state.name,\n            ticketRequest: this.state.ticketRequest,\n        };\n        \n        axios({\n            url: 'http://localhost:3000/api/save',\n            method: 'POST',\n            data: payload\n\n        })\n        .then(() => {\n            console.log('Data has been sent to the server');\n            this.resetUserInputs();\n            this.getLotteryEntrants();\n        })\n        .catch(() => {\n            console.log('Internal server error');\n        });\n    };\n\n    resetUserInputs = () => {\n        this.setState({\n            name: '',\n            ticketRequest: 0\n        });\n    };\n\n    getLotteryEntrants = () => {\n        axios.get('/api')\n        .then((response) => {\n            const data = response.data;\n            this.setState({ entrants: data});\n            console.log('data has been recieved');\n        })\n        .catch((err) => {\n            console.log(err);\n        });\n    };\n\n    shuffle = (array) => {\n        let currentIndex = array.length, temporaryValue, randomIndex;\n        while( 0 !== currentIndex){\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue\n        };\n        return array;\n    };\n\n    lotteryResults = () => {\n        let numberOfWinners = this.state.ticketAllocation / this.state.entrants[0].ticketRequest;\n        let startDraw = this.shuffle(this.state.entrants);\n        let userWinners = startDraw.slice(0,numberOfWinners);\n\n        console.log(startDraw);\n\n        let number = new TicketCollection(...userWinners);\n        let tickets = number.sum('ticketRequest');\n\n        this.setState({\n            draw:true, \n            ticketAllocation: this.state.ticketAllocation - tickets,\n            winners: userWinners, \n            hide: true\n        });      \n    };\n\n    displayWinner = () => {\n        if(this.state.hide === true) {\n            $(\".form-group\").hide()\n            $(\"#button\").hide()\n            $(\"#results\").hide()\n        };\n        \n        if(this.state.draw === true) {\n            return(\n                <div className=\"showResults\">\n                    <h1>The draw has been completed</h1>\n                    <h3>The winners are...</h3>\n                    {this.state.winners.map(({name, _id}) => {\n                        return(\n                            <h4 className=\"winners\" key={_id} >{name}</h4>\n                        )\n                    })}\n                    <h3>Congratulations to you all, enjoy your show!</h3>\n                </div>\n            );\n        };\n    };\n\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <img src={img} alt=\"\" className=\"header-img\"/>\n                 <form className=\"form-group\" onSubmit={this.submit}>\n                    <input\n                        type= \"text\"\n                        className=\"form-control\"\n                        name=\"name\"\n                        placeholder=\"What's your name?\"\n                        value={this.state.name}\n                        onChange={this.handleChange}>\n                    </input>\n                    <select\n                        className=\"form-control\"\n                        name=\"ticketRequest\"\n                        placeholder=\"quantity\"\n                        value={this.state.ticketRequest}\n                        onChange={this.handleChange}> \n                            <option value={0}>How Many Tickets?</option>\n                            <option value={2}>2</option>\n                    </select>                     \n                    <button className=\"btn btn-outline-secondary\"id=\"button\" >Submit</button>\n                    </form>\n                    <button className=\"btn btn-outline-dark\" id=\"results\" onClick={this.lotteryResults}>Lottery Results</button>\n                    <div>\n                        {this.displayWinner()}\n                    </div>\n            </div>\n        )\n    }\n}","import Lottery from './Components/Lottery/Lottery'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Lottery/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}